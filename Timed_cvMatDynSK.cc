// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "Timed_cvMat.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_RTC_mcvMat[] = {
  {"data_type", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"mat_type", CORBA::TypeCode::PR_long_tc()},
  {"width", CORBA::TypeCode::PR_ushort_tc()},
  {"height", CORBA::TypeCode::PR_ushort_tc()},
  {"bpp", CORBA::TypeCode::PR_ushort_tc()},
  {"is_shared", CORBA::TypeCode::PR_boolean_tc()},
  {"name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"memory_index", CORBA::TypeCode::PR_long_tc()},
  {"length", CORBA::TypeCode::PR_long_tc()},
  {"data", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_RTC_mcvMat
#  undef _0RL_tc_RTC_mcvMat
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mcvMat = CORBA::TypeCode::PR_struct_tc("IDL:RTC/cvMat:1.0", "cvMat", _0RL_structmember_RTC_mcvMat, 10, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace RTC { 
  const ::CORBA::TypeCode_ptr _tc_cvMat = _0RL_tc_RTC_mcvMat;
} 
#else
const ::CORBA::TypeCode_ptr RTC::_tc_cvMat = _0RL_tc_RTC_mcvMat;
#endif


static CORBA::PR_structMember _0RL_structmember_RTC_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"nsec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_RTC_mTime
#  undef _0RL_tc_RTC_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTime = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Time:1.0", "Time", _0RL_structmember_RTC_mTime, 2, &_0RL_tcTrack);


static CORBA::PR_structMember _0RL_structmember_RTC_mTimed__cvMat[] = {
  {"tm", _0RL_tc_RTC_mTime},
  {"data", _0RL_tc_RTC_mcvMat}
};

#ifdef _0RL_tc_RTC_mTimed__cvMat
#  undef _0RL_tc_RTC_mTimed__cvMat
#endif
static CORBA::TypeCode_ptr _0RL_tc_RTC_mTimed__cvMat = CORBA::TypeCode::PR_struct_tc("IDL:RTC/Timed_cvMat:1.0", "Timed_cvMat", _0RL_structmember_RTC_mTimed__cvMat, 2, &_0RL_tcTrack);



#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace RTC { 
  const ::CORBA::TypeCode_ptr _tc_Timed_cvMat = _0RL_tc_RTC_mTimed__cvMat;
} 
#else
const ::CORBA::TypeCode_ptr RTC::_tc_Timed_cvMat = _0RL_tc_RTC_mTimed__cvMat;
#endif


static void _0RL_RTC_mcvMat_marshal_fn(cdrStream& _s, void* _v)
{
  RTC::cvMat* _p = (RTC::cvMat*)_v;
  *_p >>= _s;
}
static void _0RL_RTC_mcvMat_unmarshal_fn(cdrStream& _s, void*& _v)
{
  RTC::cvMat* _p = new RTC::cvMat;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_RTC_mcvMat_destructor_fn(void* _v)
{
  RTC::cvMat* _p = (RTC::cvMat*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const RTC::cvMat& _s)
{
  RTC::cvMat* _p = new RTC::cvMat(_s);
  _a.PR_insert(_0RL_tc_RTC_mcvMat,
               _0RL_RTC_mcvMat_marshal_fn,
               _0RL_RTC_mcvMat_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, RTC::cvMat* _sp)
{
  _a.PR_insert(_0RL_tc_RTC_mcvMat,
               _0RL_RTC_mcvMat_marshal_fn,
               _0RL_RTC_mcvMat_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, RTC::cvMat*& _sp)
{
  return _a >>= (const RTC::cvMat*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const RTC::cvMat*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_RTC_mcvMat,
                    _0RL_RTC_mcvMat_unmarshal_fn,
                    _0RL_RTC_mcvMat_marshal_fn,
                    _0RL_RTC_mcvMat_destructor_fn,
                    _v)) {
    _sp = (const RTC::cvMat*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_RTC_mTimed__cvMat_marshal_fn(cdrStream& _s, void* _v)
{
  RTC::Timed_cvMat* _p = (RTC::Timed_cvMat*)_v;
  *_p >>= _s;
}
static void _0RL_RTC_mTimed__cvMat_unmarshal_fn(cdrStream& _s, void*& _v)
{
  RTC::Timed_cvMat* _p = new RTC::Timed_cvMat;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_RTC_mTimed__cvMat_destructor_fn(void* _v)
{
  RTC::Timed_cvMat* _p = (RTC::Timed_cvMat*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const RTC::Timed_cvMat& _s)
{
  RTC::Timed_cvMat* _p = new RTC::Timed_cvMat(_s);
  _a.PR_insert(_0RL_tc_RTC_mTimed__cvMat,
               _0RL_RTC_mTimed__cvMat_marshal_fn,
               _0RL_RTC_mTimed__cvMat_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, RTC::Timed_cvMat* _sp)
{
  _a.PR_insert(_0RL_tc_RTC_mTimed__cvMat,
               _0RL_RTC_mTimed__cvMat_marshal_fn,
               _0RL_RTC_mTimed__cvMat_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, RTC::Timed_cvMat*& _sp)
{
  return _a >>= (const RTC::Timed_cvMat*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const RTC::Timed_cvMat*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_RTC_mTimed__cvMat,
                    _0RL_RTC_mTimed__cvMat_unmarshal_fn,
                    _0RL_RTC_mTimed__cvMat_marshal_fn,
                    _0RL_RTC_mTimed__cvMat_destructor_fn,
                    _v)) {
    _sp = (const RTC::Timed_cvMat*)_v;
    return 1;
  }
  return 0;
}


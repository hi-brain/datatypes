// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "VisionDataType.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_Vision_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"msec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_Vision_mTime
#  undef _0RL_tc_Vision_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_Vision_mTime = CORBA::TypeCode::PR_struct_tc("IDL:Vision/Time:1.0", "Time", _0RL_structmember_Vision_mTime, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Vision { 
  const ::CORBA::TypeCode_ptr _tc_Time = _0RL_tc_Vision_mTime;
} 
#else
const ::CORBA::TypeCode_ptr Vision::_tc_Time = _0RL_tc_Vision_mTime;
#endif



static CORBA::PR_structMember _0RL_structmember_Vision_mReceptiveField[] = {
  {"tm", _0RL_tc_Vision_mTime},
  {"x", CORBA::TypeCode::PR_ushort_tc()},
  {"y", CORBA::TypeCode::PR_ushort_tc()},
  {"t", CORBA::TypeCode::PR_ushort_tc()},
  {"type", CORBA::TypeCode::PR_ushort_tc()},
  {"pixels", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Vision_mReceptiveField
#  undef _0RL_tc_Vision_mReceptiveField
#endif
static CORBA::TypeCode_ptr _0RL_tc_Vision_mReceptiveField = CORBA::TypeCode::PR_struct_tc("IDL:Vision/ReceptiveField:1.0", "ReceptiveField", _0RL_structmember_Vision_mReceptiveField, 6, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Vision { 
  const ::CORBA::TypeCode_ptr _tc_ReceptiveField = _0RL_tc_Vision_mReceptiveField;
} 
#else
const ::CORBA::TypeCode_ptr Vision::_tc_ReceptiveField = _0RL_tc_Vision_mReceptiveField;
#endif



static CORBA::PR_structMember _0RL_structmember_Vision_mImage[] = {
  {"tm", _0RL_tc_Vision_mTime},
  {"x", CORBA::TypeCode::PR_ulong_tc()},
  {"y", CORBA::TypeCode::PR_ulong_tc()},
  {"t", CORBA::TypeCode::PR_ulong_tc()},
  {"type", CORBA::TypeCode::PR_ulong_tc()},
  {"pixels", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Vision_mImage
#  undef _0RL_tc_Vision_mImage
#endif
static CORBA::TypeCode_ptr _0RL_tc_Vision_mImage = CORBA::TypeCode::PR_struct_tc("IDL:Vision/Image:1.0", "Image", _0RL_structmember_Vision_mImage, 6, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Vision { 
  const ::CORBA::TypeCode_ptr _tc_Image = _0RL_tc_Vision_mImage;
} 
#else
const ::CORBA::TypeCode_ptr Vision::_tc_Image = _0RL_tc_Vision_mImage;
#endif


static void _0RL_Vision_mTime_marshal_fn(cdrStream& _s, void* _v)
{
  Vision::Time* _p = (Vision::Time*)_v;
  *_p >>= _s;
}
static void _0RL_Vision_mTime_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Vision::Time* _p = new Vision::Time;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Vision_mTime_destructor_fn(void* _v)
{
  Vision::Time* _p = (Vision::Time*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Vision::Time& _s)
{
  Vision::Time* _p = new Vision::Time(_s);
  _a.PR_insert(_0RL_tc_Vision_mTime,
               _0RL_Vision_mTime_marshal_fn,
               _0RL_Vision_mTime_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Vision::Time* _sp)
{
  _a.PR_insert(_0RL_tc_Vision_mTime,
               _0RL_Vision_mTime_marshal_fn,
               _0RL_Vision_mTime_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Vision::Time*& _sp)
{
  return _a >>= (const Vision::Time*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Vision::Time*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Vision_mTime,
                    _0RL_Vision_mTime_unmarshal_fn,
                    _0RL_Vision_mTime_marshal_fn,
                    _0RL_Vision_mTime_destructor_fn,
                    _v)) {
    _sp = (const Vision::Time*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Vision_mReceptiveField_marshal_fn(cdrStream& _s, void* _v)
{
  Vision::ReceptiveField* _p = (Vision::ReceptiveField*)_v;
  *_p >>= _s;
}
static void _0RL_Vision_mReceptiveField_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Vision::ReceptiveField* _p = new Vision::ReceptiveField;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Vision_mReceptiveField_destructor_fn(void* _v)
{
  Vision::ReceptiveField* _p = (Vision::ReceptiveField*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Vision::ReceptiveField& _s)
{
  Vision::ReceptiveField* _p = new Vision::ReceptiveField(_s);
  _a.PR_insert(_0RL_tc_Vision_mReceptiveField,
               _0RL_Vision_mReceptiveField_marshal_fn,
               _0RL_Vision_mReceptiveField_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Vision::ReceptiveField* _sp)
{
  _a.PR_insert(_0RL_tc_Vision_mReceptiveField,
               _0RL_Vision_mReceptiveField_marshal_fn,
               _0RL_Vision_mReceptiveField_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Vision::ReceptiveField*& _sp)
{
  return _a >>= (const Vision::ReceptiveField*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Vision::ReceptiveField*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Vision_mReceptiveField,
                    _0RL_Vision_mReceptiveField_unmarshal_fn,
                    _0RL_Vision_mReceptiveField_marshal_fn,
                    _0RL_Vision_mReceptiveField_destructor_fn,
                    _v)) {
    _sp = (const Vision::ReceptiveField*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Vision_mImage_marshal_fn(cdrStream& _s, void* _v)
{
  Vision::Image* _p = (Vision::Image*)_v;
  *_p >>= _s;
}
static void _0RL_Vision_mImage_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Vision::Image* _p = new Vision::Image;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Vision_mImage_destructor_fn(void* _v)
{
  Vision::Image* _p = (Vision::Image*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Vision::Image& _s)
{
  Vision::Image* _p = new Vision::Image(_s);
  _a.PR_insert(_0RL_tc_Vision_mImage,
               _0RL_Vision_mImage_marshal_fn,
               _0RL_Vision_mImage_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Vision::Image* _sp)
{
  _a.PR_insert(_0RL_tc_Vision_mImage,
               _0RL_Vision_mImage_marshal_fn,
               _0RL_Vision_mImage_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Vision::Image*& _sp)
{
  return _a >>= (const Vision::Image*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Vision::Image*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Vision_mImage,
                    _0RL_Vision_mImage_unmarshal_fn,
                    _0RL_Vision_mImage_marshal_fn,
                    _0RL_Vision_mImage_destructor_fn,
                    _v)) {
    _sp = (const Vision::Image*)_v;
    return 1;
  }
  return 0;
}

